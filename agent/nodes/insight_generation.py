from typing import Dict, Anyimport statisticsBRANDS = ["Atomberg", "Crompton", "Havells", "Orient", "Bajaj", "Polycab", "Usha"]def _rule_based_insights(metrics: Dict[str, Any]) -> Dict[str, str]:    insights = {}    top_brand = max(metrics.items(), key=lambda x: x[1]["sov_percent"])[0]    top_sov = metrics[top_brand]["sov_percent"]    insights["sov"] = f"{top_brand} leads with {top_sov:.1f}% Share of Voice among smart fans."    top_spv_brand = max(metrics.items(), key=lambda x: x[1]["spv_percent"])[0]    top_spv = metrics[top_spv_brand]["spv_percent"]    insights["spv"] = f"{top_spv_brand} has the highest Share of Positive Voice at {top_spv:.1f}%."    top_eng_brand = max(metrics.items(), key=lambda x: x[1]["engagement_share_percent"])[0]    top_eng = metrics[top_eng_brand]["engagement_share_percent"]    insights["engagement"] = f"{top_eng_brand} drives the most engagement with {top_eng:.1f}% share."    return insightsdef insight_generation_node(state: Dict[str, Any]) -> Dict[str, Any]:    """    Node 8: Generate marketing insights from computed metrics.    """    metrics = state.get("metrics", {})    rule_based = _rule_based_insights(metrics)    narrative = (        f"Based on the data, {rule_based['sov']} "        f"Additionally, {rule_based['spv']} "        f"Finally, {rule_based['engagement']}"    )    state["insights"] = {        "rule_based": rule_based,        "narrative": narrative,    }    return state